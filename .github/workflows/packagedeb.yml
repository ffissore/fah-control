# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  #  linux_build:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Set up Python
  #        uses: actions/setup-python@v2
  #        with:
  #          python-version: 3.8
  #      - name: versions
  #        run: |
  #          pip --version
  #          python --version
  #
  #      # system dependencies
  #      - name: Install dependencies
  #        run: |
  #          sudo apt-get install python3-all debhelper python3-setuptools devscripts
  #      # python dependencies
  #      - name: Install python dependencies
  #        run: |
  #          python -m pip install --upgrade pip
  #          pip install setuptools stdeb
  #      # building
  #      - name: Build
  #        run: |
  #          python3 setup.py --command-packages=stdeb.command sdist_dsc
  #      # post build
  #      - name: Upload artifacts
  #        uses: actions/upload-artifact@v2
  #        with:
  #          path: ./dist/FAHControl*.tar.gz
  #
  #      - name: inspect output
  #        run: find

  #  windows_build:
  #    runs-on: windows-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #
  #      # system dependencies
  #      - uses: eine/setup-msys2@v0
  #      - name: Install dependencies
  #        run: |
  #          msys2do pacman --noconfirm -S mingw-w64-x86_64-gtk3
  #          msys2do pacman --noconfirm -S mingw-w64-x86_64-python3-gobject
  #          msys2do pacman --noconfirm -S mingw-w64-x86_64-python3-pip
  #          msys2do pacman --noconfirm -S mingw-w64-x86_64-gcc
  #      # python dependencies
  #      - name: Install python dependencies
  #        run: |
  #          msys2do pip3 install setuptools cx_Freeze
  #      # building
  #      - name: Build
  #        run: |
  #          msys2do python3 setup.py build sdist
  #      # post build
  #      - name: Upload artifacts
  #        uses: actions/upload-artifact@v2
  #        with:
  #          path: ./dist/FAHControl*.tar.gz
  #
  #      - name: inspect output
  #        run: find

  windows_build:
    strategy:
      vcpkg-commit-sha: c7ab9d3110813979a873b2dbac630a9ab79850dc
    runs-on: windows-latest
    steps:
      #      - name: Cache vcpkg
      #        uses: actions/cache@v2
      #        with:
      #          path: D:\a\vcpkg
      #          key: ${{ runner.os }}-vcpkg-${{ vcpkg-commit-sha }}
      # Restore from cache the previously built ports. If cache-miss, download, build vcpkg.
      - name: Restore from cache and install vcpkg
        # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
        uses: lukka/run-vcpkg@v3
        with:
          setupOnly: true
          vcpkgGitCommitId: ${{ vcpkg-commit-sha }}
          vcpkgDirectory: D:\a\vcpkg
      - name: Install gtk
        id: gtk-vcpkg
        run: |
          ${{ env.VCPKG_ROOT }}\vcpkg install gtk:x64-windows
      - name: Print a greeting
        run: |
          Get-ChildItem -Path d:\ -Recurse

# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
#
#name: Python package
#
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#jobs:
#  build:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [windows-2019]
#        python-version: [3.8]
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: versions
#        run: |
#          pip --version
#          python --version
#
#      # system dependencies
#      - name: Install linux dependencies
#        if: startsWith(matrix.os, 'ubuntu')
#        run: |
#          sudo apt-get install python3-all debhelper python3-setuptools devscripts
#
#      - name: Install macos dependencies
#        if: startsWith(matrix.os, 'macos')
#        run: |
#          brew install gtk+3 pygobject3
#
#      # python dependencies
#      - name: Install python dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install setuptools
#
#      - name: Install linux python dependencies
#        if: startsWith(matrix.os, 'ubuntu')
#        run: |
#          pip install stdeb
#
#      - name: Install windows python dependencies
#        if: startsWith(matrix.os, 'windows')
#        run: |
#          pip install cx_Freeze
#
#      - name: Install macos python dependencies
#        if: startsWith(matrix.os, 'macos')
#        run: |
#          pip install py2app pycairo
#
#      # building
#      - name: Build
#        if: startsWith(matrix.os, 'ubuntu')
#        run: |
#          python3 setup.py --command-packages=stdeb.command sdist_dsc
#
#      - name: Build
#        if: startsWith(matrix.os, 'windows')
#        run: |
#          python setup.py build sdist
#
#      - name: Build
#        if: startsWith(matrix.os, 'macos')
#        run: |
#          python3 setup.py py2app
#
#      # post build
#      - name: Upload artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          path: ./dist/FAHControl*.tar.gz
#
#      - name: inspect output
#        run: find
